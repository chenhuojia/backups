<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016-6-3
 * Time: 11:46
 */
namespace Acme\MinsuBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Acme\MinsuBundle\Entity\TravelNote;
use Acme\MinsuBundle\Entity\TravelNoteImage;
use Acme\MinsuBundle\Entity\FollowCollect;

class apiTravelNoteController extends Controller
{
    /**
     * @Route("apiUploadTravelNote", name="apiUploadTravelNote_")
     */
    public function apiUploadTravelNoteAction(Request $request)
    {
        /*$coverImg = base64_decode('');
        $contentImg[0] = '';
        $contentImg[1] = '';
        $contentImg[2] = '';
        */
        if (!$memberId = $request->get('member_id')) {
            $massage = $this->failMassageReturnAction('not found member id');
            return new JsonResponse($massage);
        }
        if (!$coverImg = $request->get('cover_img')) {
            $massage = $this->failMassageReturnAction('not found cover image');
            return new JsonResponse($massage);
        }
        if (!$title = $request->get('title')) {
            $massage = $this->failMassageReturnAction('not found title!');
            return new JsonResponse($massage);
        }
        if (!$content = $request->get('content')) {
            $massage = $this->failMassageReturnAction('not found content!');
            return new JsonResponse($massage);
        }
        $contentImg = $request->get('content_img');
        $addr = $request->get('addr');
        $homestay = $request->get('homestay');
        $ip = $_SERVER['REMOTE_ADDR'];
        $longitude = $request->get('longitude');
        $latitude = $request->get('latitude');
        $province = $request->get('province');

        $memberPath = $this->getParameter('memberPath');
        try {
            $travelNote = new TravelNote();
            $travelNote->setMemberId($memberId);
            $travelNote->setTravelTitle($title);
            $travelNote->setTravelContent($content);
            $travelNote->setUploadIp("$ip");
            if ($addr) {
                $travelNote->setAddr($addr);
            }
            if ($longitude) {
                $travelNote->setLongitude($longitude);
            }
            if ($latitude) {
                $travelNote->setLatitude($latitude);
            }
            if ($province) {
                $travelNote->setProvince($province);
            }
            if ($homestay) {
                $travelNote->setRecommendHomestay($homestay);
            }
            $travelNote->setState(0);
            $travelNote->setAddtime(time());

            $fs = new Filesystem();
            $em = $this->getDoctrine()->getManager();
            $em->persist($travelNote);
            $em->flush();
            $travelNoteId = $travelNote->getId();

            $conn = $em->getConnection();
            $coverImg = base64_decode($coverImg);
            $contentImg = json_decode($contentImg,true);
            $contentImgLength = count($contentImg);
            $suffix = ".jpg";
            for ($i = 0; $i < $contentImgLength; $i++) {
                $contentImg[$i] = base64_decode($contentImg[$i]);
                $randNum = "";
                for ($j = 0; $j < 7; $j++) {
                    $tmpNum = intval(mt_rand(1,9));
                    $randNum .= $tmpNum;
                }
                $imgPath = $memberPath . 'travelNoteImages' . '/' . $travelNoteId . '/';
                if (!file_exists($imgPath)) {
                    $fs->mkdir($imgPath, true);
                }
                if (file_put_contents($imgPath . $randNum . $suffix, $contentImg[$i])) {
                    try {
                        $conn->insert('msk_travel_note_images',
                            array(
                                'id' => 'default',
                                'travel_note_id' => $travelNoteId,
                                'travel_note_image' => "$randNum$suffix",
                                'is_default' => 0,
                                'travel_note_image_sort' => $i,
                                'add_time' => time()
                            )
                        );
                    } catch (Exception $e) {
                        return new JsonResponse($this->failMassageReturnAction($e->getMessage()));
                    }
                }
            }
            $randNum = "";
            for ($k = 0; $k < 8; $k++) {
                $tmpNum = intval(mt_rand(1,9));
                $randNum .= $tmpNum;
            }
            $imgPath = $memberPath . 'travelNoteImages' . '/' . $travelNoteId . '/';

            if (!file_exists($imgPath)) {
                $fs->mkdir($imgPath, true);
            }

            if (file_put_contents($imgPath . $randNum . $suffix,$coverImg)) {
                try {
                    $conn->insert('msk_travel_note_images',
                        array(
                            'id' => 'default',
                            'travel_note_id' => $travelNoteId,
                            'travel_note_image' => "$randNum$suffix",
                            'is_default' => 1,
                            'add_time' => time()
                        )
                    );
                    return new JsonResponse($this->successMassageReturnAction('success'));
                } catch (Exception $e) {
                    return new JsonResponse($this->failMassageReturnAction($e->getMessage()));
                }
            }
        } catch(Exception $e) {
            return new JsonResponse($this->failMassageReturnAction($e->getMessage()));
        }
    }

    /**
     * @Route("/apiTravelIndexData", name="apiTravelIndexData_")
     */
    public function apiTravelIndexData(Request $request)
    {
        $travelIndex = $request->get('travel_index');
        $page = $request->get('page');
        $province = $request->get('province');
        $longitude = $request->get('longitude');
        $latitude = $request->get('latitude');

        $host = $this->getParameter('host');
        $memberPath = $this->getParameter('memberPath');
        $pageSize = $this->getParameter('pagesize');
        $em = $this->getDoctrine()->getManager();
        $conn = $em->getConnection();

        $startPage = ($page - 1) * $pageSize;

        if ($travelIndex == 1) {
            try {
                $travelDataQry = $conn->createQueryBuilder()
                    ->select(
                        'p.travel_title', 'p.id', 'c.travel_note_image','p.pay_money'
                    )
                    ->from('msk_travel_note', 'p')
                    ->leftjoin('p', 'msk_travel_note_images', 'c', 'p.id = c.travel_note_id')
                    ->where('c.is_default = 1')
                    ->andWhere('p.state = 0')
                    ->setFirstResult($startPage)
                    ->setMaxResults($pageSize)
                    ->orderBy('p.addtime', 'desc')
                    ->execute();
                $data = $travelDataQry->fetchAll();
            } catch (Exception $e) {
                return new JsonResponse($this->failMassageReturnAction('sql exception'));
            }

            $travelDataResLenth = count($data);
            for ($i = 0; $i < $travelDataResLenth; $i++) {
                $data[$i]['travel_note_cover_image'] =
                    $host . $memberPath . 'travelNoteImages/' . $data[$i]['id'] . '/' . $data[$i]['travel_note_image'];
                unset($data[$i]['travel_note_image']);
            }
//            var_dump($data);
            return new JsonResponse($data);
        } elseif ($travelIndex == 2) {
            try {
                $travelDataQry = $conn->createQueryBuilder()
                    ->select(
                        "p.travel_title, p.id, c.travel_note_image, count(a.travel_note_id) as myCount",'p.pay_money'
                    )
                    ->from('msk_travel_note', 'p')
                    ->leftjoin('p', 'msk_travel_note_images', 'c', 'p.id = c.travel_note_id')
                    ->leftjoin('p', 'msk_follow_collect', 'a', 'p.id = a.travel_note_id')
                    ->where('c.is_default = :is_default')
                    ->andWhere('p.state = :state')
                    ->andWhere('a.is_upvote = :is_upvote')
                    ->setParameters(array('is_default' => '1', 'state' => '0', 'is_upvote' => '1'))
                    ->setFirstResult($startPage)
                    ->setMaxResults($pageSize)
                    ->groupBy('a.travel_note_id')
                    ->orderBy('myCount', 'desc')
                    ->execute();
                $data = $travelDataQry->fetchAll();
            } catch (Exception $e) {
                return new JsonResponse($this->failMassageReturnAction('sql exception'));
            }

            $travelDataResLenth = count($data);
            for ($i = 0; $i < $travelDataResLenth; $i++) {
                $data[$i]['travel_note_cover_image'] =
                    $host . $memberPath . 'travelNoteImages/' . $data[$i]['id'] . '/' . $data[$i]['travel_note_image'];
                unset($data[$i]['travel_note_image']);
                unset($data[$i]['myCount']);
            }
//            var_dump($data);
            return new JsonResponse($data);
        } elseif ($travelIndex == 3) {
            if (!$longitude) {
                return new JsonResponse($this->failMassageReturnAction('not receive longitude'));
            }
            if (!$latitude) {
                return new JsonResponse($this->failMassageReturnAction('not receive latitude'));
            }
            if (!$province) {
                return new JsonResponse($this->failMassageReturnAction('not receive province'));
            }
            try {
                $travelDataQry = $conn->createQueryBuilder()
                    ->select(
                        "p.travel_title, p.id, p.longitude as x, p.latitude as y, c.travel_note_image",'p.pay_money'
                    )
                    ->from('msk_travel_note', 'p')
                    ->leftjoin('p', 'msk_travel_note_images', 'c', 'p.id = c.travel_note_id')
                    ->where('c.is_default = :is_default')
                    ->andWhere('p.state = :state')
                    ->andWhere('p.province = :province')
                    ->setParameters(array('is_default' => '1', 'state' => '0', 'province' => $province))
                    ->setFirstResult($startPage)
                    ->setMaxResults($pageSize)
                    ->orderBy("(($longitude - x)*($longitude - x) + ($latitude - y) * ($latitude - y))", 'ASC')
                    ->execute();
                $data = $travelDataQry->fetchAll();
            } catch (Exception $e) {
                return new JsonResponse($this->failMassageReturnAction('sql exception'));
            }

            $travelDataResLenth = count($data);
            for ($i = 0; $i < $travelDataResLenth; $i++) {
                $data[$i]['travel_note_cover_image'] =
                    $host . $memberPath . 'travelNoteImages/' . $data[$i]['id'] . '/' . $data[$i]['travel_note_image'];
                unset($data[$i]['travel_note_image']);
                unset($data[$i]['x']);
                unset($data[$i]['y']);
            }
//            var_dump($data);
            return new JsonResponse($data);
        }
        else {
            return new JsonResponse($this->failMassageReturnAction('not receive parameter'));
        }
    }
    /*public function apiTravelIndexData(Request $request)
    {
        $travelIndex = $request->get('travel_index');
        $page = $request->get('page');

        if ($travelIndex == 1) {
            $host = $this->getParameter('host');
            $memberPath = $this->getParameter('memberPath');
            $pageSize = $this->getParameter('pagesize');

            $em = $this->getDoctrine()->getManager();
            $pageTotalQry = $em->createQuery(
                "select count(p.id) from AcmeMinsuBundle:TravelNote p"
            );
            $pageTotalRes = $pageTotalQry->execute();
            $pageTotal = $pageTotalRes[0][1];
            if ($page < 1) {
                $page = 1;
            }
            $totalPage = ceil($pageTotal / $pageSize);//var_dump($total);
            if ($page > $totalPage) {
                $page = $totalPage;
            }
            $startPage = ($page - 1) * $pageSize;

            try {
                $conn = $em->getConnection();
                $travelDataQry = $conn->createQueryBuilder()
                    ->select(
                        'p.travel_title', 'p.id', 'c.travel_note_image'
                    )
                    ->from('msk_travel_note', 'p')
                    ->leftjoin('p', 'msk_travel_note_images', 'c', 'p.id = c.travel_note_id')
                    ->where('c.is_default = 1')
                    ->andWhere('p.state = 0')
                    ->setFirstResult($startPage)
                    ->setMaxResults($pageSize)
                    ->orderBy('p.addtime', 'desc')
                    ->execute();
                $data = $travelDataQry->fetchAll();
            } catch (Exception $e) {
                return new JsonResponse($this->failMassageReturnAction('sql exception'));
            }

            $travelDataResLenth = count($data);
            for ($i = 0; $i < $travelDataResLenth; $i++) {

                $data[$i]['travel_note_cover_image'] =
                    $host . $memberPath . 'travelNoteImages/' . $data[$i]['id'] . '/' . $data[$i]['travel_note_image'];
                unset($data[$i]['travel_note_image']);
            }
//            var_dump($data);
            return new JsonResponse($data);
        } else {
            return new JsonResponse($this->failMassageReturnAction('not receive parameter'));
        }
    }*/

    /**
     * @Route("/apiTravelNoteDetail", name="apiTravelNoteDetail_")
     */
    public function apiTravelNoteDetailAction(Request $request)
    {
        $id = $request->get('id');
        $currentMemberId = $request->get('member_id');
        if (!$id) {
            $massage = $this->failMassageReturnAction('not found id');
            return new JsonResponse($massage);
        }

        $host = $this->getParameter('host');
        $avatarPath = $this->getParameter('avatar_path');
        $memberPath = $this->getParameter('memberPath');
        $travelNoteContentImg = array();

        try {
            $em = $this->getDoctrine()->getManager();

            $updateArticleClick = $em->getRepository('AcmeMinsuBundle:TravelNote')->find($id);
            if (!$updateArticleClick) {
                throw $this->createNotFoundException(
                    'no travel note found for id ' . $id
                );
            }
            $updateArticleClick->setArticleClick($updateArticleClick->getArticleClick() + 1);
            $em->flush();

            if ($currentMemberId) {
                $upvoteCollectQry = $em->createQuery(
                    "select p.is_upvote, p.is_collect from AcmeMinsuBundle:FollowCollect p 
                WHERE p.travel_note_id = :id AND p.member_id = :mId"
                );
                $upvoteCollectQry->setParameters(array('id' => $id, 'mId' => $currentMemberId));
                $upvoteCollectRes = $upvoteCollectQry->execute();
//                var_dump($upvoteCollectRes);
                if ($upvoteCollectRes) {
                    if ($upvoteCollectRes[0]['is_upvote'] === false) {
                        $isUpvote = '0';
                    } elseif ($upvoteCollectRes[0]['is_upvote'] === true) {
                        $isUpvote = '1';
                    } elseif ($upvoteCollectRes[0]['is_upvote'] === null) {
                        $isUpvote = '0';
                    }
                    if ($upvoteCollectRes[0]['is_collect'] === false) {
                        $isCollect = '0';
                    } elseif ($upvoteCollectRes[0]['is_collect'] === true) {
                        $isCollect = '1';
                    } elseif ($upvoteCollectRes[0]['is_collect'] === null) {
                        $isCollect = '0';
                    }
                } else {
                    $isUpvote = '0';
                    $isCollect = '0';
                }
            } else {
                $isUpvote = '0';
                $isCollect = '0';
            }
//            var_dump($isUpvote);
//            var_dump($isCollect);

            $upvoteNumQry = $em->createQuery(
                "select count(p.travel_note_id) from AcmeMinsuBundle:FollowCollect p 
                  WHERE p.is_upvote = :isUpvote AND p.travel_note_id = :id"
            );
            $upvoteNumQry->setParameter('isUpvote', '1');
            $upvoteNumQry->setParameter('id', $id);
            $upvoteNumRes = $upvoteNumQry->execute();
            if ($upvoteNumRes) {
                $upvoteNum = $upvoteNumRes[0][1];
            } else {
                $upvoteNum = '0';
            }

            $travelNoteQry = $em->createQuery(
                "select p.member_id, p.travel_title, p.travel_content, p.addr, p.recommend_homestay, p.addtime,p.pay_money
            from AcmeMinsuBundle:TravelNote p WHERE p.id = :id AND p.state = 0"
            );
            $travelNoteQry->setParameter('id', $id);
            $travelNoteRes = $travelNoteQry->execute();//var_dump($travelNoteRes);

            $contentImageQry = $em->createQuery(
                "select p.travel_note_image from AcmeMinsuBundle:TravelNoteImage p 
            WHERE p.travel_note_id = :id AND p.is_default = 0 ORDER BY p.travel_note_image_sort ASC"
            );
            $contentImageQry->setParameter('id', $id);
            $contentImageRes = $contentImageQry->execute();
            foreach ($contentImageRes as $v) {
                array_push($travelNoteContentImg, $host . $memberPath . 'travelNoteImages/' . $id . '/' . $v['travel_note_image']);
            }

            $coverImageQry = $em->createQuery(
                "select p.travel_note_image from AcmeMinsuBundle:TravelNoteImage p 
            WHERE p.travel_note_id = :id AND p.is_default = 1 ORDER BY p.travel_note_image_sort ASC"
            );
            $coverImageQry->setParameter('id', $id);
            $coverImageRes = $coverImageQry->execute();
            $coverImage = $host . $memberPath . 'travelNoteImages/' . $id . '/' . $coverImageRes[0]['travel_note_image'];

            $memberId = $travelNoteRes[0]['member_id'];

            $avatarQry = $em->createQuery(
                "select p.avatar from AcmeMinsuBundle:Member p WHERE p.id = :memberId"
            );
            $avatarQry->setParameter('memberId', $memberId);
            $avatarRes = $avatarQry->execute();
        if (!empty($avatarRes) && !empty($avatarRes[0])) {
                $avatar = $host . $avatarPath . $memberId . '/' . $avatarRes[0]['avatar'];
            } else {
                $avatar = '';
            }

            $nicknameQry = $em->createQuery(
                "select p.nickname from AcmeMinsuBundle:MemberInfo p WHERE p.member_id = :memberId"
            );
            $nicknameQry->setParameter('memberId', $memberId);
            $nicknameRes = $nicknameQry->execute();
            if ($nicknameRes) {
                $nickname = $nicknameRes[0]['nickname'];
            } else {
                $nickname = '';
            }

            $homestay = $travelNoteRes[0]['recommend_homestay'];
            $conn = $em->getConnection();
            $homestayImgQry = $conn->createQueryBuilder()
                ->select(
                    'p.goods_image', 'p.homestay_room_id', 'c.homestay_title'
                )
                ->from('msk_images', 'p')
                ->rightjoin('p', 'msk_homestay', 'c', 'c.id = p.homestay_room_id')
                ->where('c.homestay_name = :homestay')
                ->andWhere('p.img_type = :type')
                ->setParameter('homestay', $homestay)
                ->setParameter('type', 0)
                ->setMaxResults(1)
                ->execute();
            $homestayImgRes = $homestayImgQry->fetchAll();
            if (!empty($homestayImgRes)) {
                $homestayImg =
                    $host . $memberPath . 'HomeStay/' . $homestayImgRes[0]['homestay_room_id'] . '/' . $homestayImgRes[0]['goods_image'];
                $homgstayTital = $homestayImgRes[0]['homestay_title'];
                $homestayRoomId = $homestayImgRes[0]['homestay_room_id'];
            } else {
                $homestayImg = '';
                $homgstayTital = '';
                $homestayRoomId = '';
            }
        } catch (Exception $e) {
            return new JsonResponse($this->failMassageReturnAction($e->getMessage()));
        }

        $data = array(
            'travel_note_cover_image' => $coverImage,
            'travel_note_title' => $travelNoteRes[0]['travel_title'],
            'travel_note_addtime' => $travelNoteRes[0]['addtime'],
            'travel_note_addr' => $travelNoteRes[0]['addr'],
            'travel_note_content' => $travelNoteRes[0]['travel_content'],
            'travel_note_content_image' => $travelNoteContentImg,
            'travel_note_homestay' => $travelNoteRes[0]['recommend_homestay'],
            'travel_note_homestay_image' => $homestayImg,
            'travel_note_homestay_title' => $homgstayTital,
            'travel_note_homestay_id' => $homestayRoomId,
            'member_avatar' => $avatar,
            'member_nickname' => $nickname,
            'is_upvote' => $isUpvote,
            'is_collect' => $isCollect,
            'upvote_num' => $upvoteNum,
        		'pay_money' => $travelNoteRes[0]['pay_money']
        );
        //print_r($data);
        return new JsonResponse($data);
    }

    /**
     * @Route("/apiUpvoteCollect", name="apiUpvoteCollect_")
     */
    public function apiFollowUpvoteAction(Request $request)
    {
        if (!$travelNoteId = $request->get('travel_note_id')) {
            return new JsonResponse($this->failMassageReturnAction('not receive travel note id'));
        }
        if (!$memberId = $request->get('member_id')) {
            return new JsonResponse($this->failMassageReturnAction('not receive user id'));
        }
        if (!$action = $request->get('action')) {
            return new JsonResponse($this->failMassageReturnAction('not receive action'));
        }
        $time = time();

        $em = $this->getDoctrine()->getManager();
        $travelNoteExist = $em->getRepository('AcmeMinsuBundle:FollowCollect')->findOneBy(array(
            'travel_note_id' => $travelNoteId, 'member_id' => $memberId
        ));

        if ($action == 10) {
            $upvote = $request->get('upvote');
            if (!$upvote) {
                return new JsonResponse($this->failMassageReturnAction('not receive upvote parameter'));
            }
            if ($travelNoteExist) {
                $travelNoteExist->setIsUpvote($upvote);
                $travelNoteExist->setAddTime($time);
                if (!$em->flush()) {
                    return new JsonResponse($this->successMassageReturnAction('success'));
                } else {
                    return new JsonResponse($this->failMassageReturnAction('update upvote fail'));
                }
            } else {
                $conn = $em->getConnection();

                try {
                    $conn->insert('msk_follow_collect',
                        array(
                            'travel_note_id' => $travelNoteId,
                            'member_id' => $memberId,
                            'is_upvote' => $upvote,
                            'is_collect' => 0,
                            'add_time' => $time
                        )
                    );
                    return new JsonResponse($this->successMassageReturnAction('success'));
                } catch (Exception $e) {
                    return new JsonResponse($this->failMassageReturnAction($e->getMessage()));
                }
            }
        } elseif ($action == 20) {
            $collect = $request->get('collect');
            if (!$collect) {
                return new JsonResponse($this->failMassageReturnAction('not receive collect parameter'));
            }
            if ($travelNoteExist) {
//                var_dump('niha');
                $travelNoteExist->setIsCollect($collect);
                $travelNoteExist->setAddTime($time);
                if (!$em->flush()) {
//                    var_dump('jsid');
                    return new JsonResponse($this->successMassageReturnAction('success'));
                } else {
                    return new JsonResponse($this->failMassageReturnAction('update collect fail'));
                }
            } else {
                $conn = $em->getConnection();
                try {
                    $conn->insert('msk_follow_collect',
                        array(
                            'travel_note_id' => $travelNoteId,
                            'member_id' => $memberId,
                            'is_upvote' => 0,
                            'is_collect' => $collect,
                            'add_time' => $time
                        )
                    );
                    return new JsonResponse($this->successMassageReturnAction('success'));
                } catch (Exception $e) {
                    return new JsonResponse($this->failMassageReturnAction($e->getMessage()));
                }
            }
        } else {
            return new JsonResponse($this->failMassageReturnAction('action not correct'));
        }
    }

    /**
     * @Route("/failMassageReturn", name="failMassageReturn_")
     */
    public function failMassageReturnAction($reminderMassage)
    {
        $massage['status'] = '0';
        $massage['error'] = '1';
        $massage['massage'] = $reminderMassage;
        return $massage;
    }

    /**
     * @Route("/successMassageReturn", name="successMassageReturn_")
     */
    public function successMassageReturnAction($reminderMassage)
    {
        $massage['status'] = '1';
        $massage['error'] = '0';
        $massage['massage'] = $reminderMassage;
        return $massage;
    }

    /**
     * @Route("/apitest",name="api_test_")
     */
    public function apitestAction()
    {
//        var_dump($_SERVER['REMOTE_ADDR']);
        return $this->render('AcmeMinsuBundle:apitest:apitest.html.twig');
    }
}






































